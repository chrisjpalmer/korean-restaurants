name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.create-image-tag.outputs.IMAGE_TAG }}
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - run: npm install
      - run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Create image tag
        id: create-image-tag
        run: |
          VERSION=v`date +%Y%m%d-%H%M%S`
          echo "created version tag: $VERSION"
          IMAGE_TAG=ghcr.io/${{ github.repository }}:$VERSION
          echo "created image tag: $IMAGE_TAG"
          echo "IMAGE_TAG=$IMAGE_TAG" >> "$GITHUB_OUTPUT"

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ghcr.io/${{ github.repository }}:latest,${{ steps.create-image-tag.outputs.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    needs: build
    environment: production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
            go-version: '1.21'

      - name: Install Control Plane CLI
        shell: bash
        run: |
          sudo npm install -g @controlplane/cli
          cpln --version

      - name: Install gomplate
        shell: bash
        run: |
          go install github.com/hairyhenderson/gomplate/v4/cmd/gomplate@latest

      - name: Substitute Tokens in Control Plane YAML Files
        shell: bash
        env:
          IMAGE_TAG: ${{needs.build.outputs.IMAGE_TAG}}
        run: |
          gomplate -f cpln/workload.yaml > cpln/workload.yaml

      - name: Run CPLN Apply 
        shell: bash
        env: 
          CPLN_ORG: ${{secrets.CPLN_ORG}}
          CPLN_GVC: ${{secrets.CPLN_GVC}}
          CPLN_WORKLOAD: ${{secrets.CPLN_WORKLOAD}}
          CPLN_TOKEN: ${{secrets.CPLN_TOKEN}}
        run: |
          cpln apply -f cpln/workload.yaml --gvc ${CPLN_GVC}